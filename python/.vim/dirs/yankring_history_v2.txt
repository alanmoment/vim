#,v
,V
Bundle 'bradfitz/goimports',V
Bundle 'dgryski/vim-godef',V
Bundle 'Blackrush/vim-gocode',V
Bundle 'fatih/vim-go',V
Plugin 'Shougo/neocomplete.vim'"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!" Disable AutoComplPop.let g:acp_enableAtStartup = 0" Use neocomplete.let g:neocomplete#enable_at_startup = 1" Use smartcase.let g:neocomplete#enable_smart_case = 1" Set minimum syntax keyword length.let g:neocomplete#sources#syntax#min_keyword_length = 3let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'" Define dictionary.let g:neocomplete#sources#dictionary#dictionaries = {    \ 'default' : '',    \ 'vimshell' : $HOME.'/.vimshell_hist',    \ 'scheme' : $HOME.'/.gosh_completions'        \ }" Define keyword.if !exists('g:neocomplete#keyword_patterns')    let g:neocomplete#keyword_patterns = {}endiflet g:neocomplete#keyword_patterns['default'] = '\h\w*'" Plugin key-mappings.inoremap <expr><C-g>     neocomplete#undo_completion()inoremap <expr><C-l>     neocomplete#complete_common_string()" Recommended key-mappings." <CR>: close popup and save indent.inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>function! s:my_cr_function()  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"  " For no inserting <CR> key.  "return pumvisible() ? "\<C-y>" : "\<CR>"endfunction" <TAB>: completion.inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"" <C-h>, <BS>: close popup and delete backword char.inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"" Close popup by <Space>."inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"" AutoComplPop like behavior."let g:neocomplete#enable_auto_select = 1" Shell like behavior(not recommended).,v
Plugin 'Shougo/neocomplete.vim'"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!" Disable AutoComplPop.let g:acp_enableAtStartup = 0" Use neocomplete.let g:neocomplete#enable_at_startup = 1" Use smartcase.let g:neocomplete#enable_smart_case = 1" Set minimum syntax keyword length.let g:neocomplete#sources#syntax#min_keyword_length = 3let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'" Define dictionary.let g:neocomplete#sources#dictionary#dictionaries = {    \ 'default' : '',    \ 'vimshell' : $HOME.'/.vimshell_hist',    \ 'scheme' : $HOME.'/.gosh_completions'        \ }" Define keyword.if !exists('g:neocomplete#keyword_patterns')    let g:neocomplete#keyword_patterns = {}endiflet g:neocomplete#keyword_patterns['default'] = '\h\w*'" Plugin key-mappings.inoremap <expr><C-g>     neocomplete#undo_completion()inoremap <expr><C-l>     neocomplete#complete_common_string()" Recommended key-mappings." <CR>: close popup and save indent.inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>function! s:my_cr_function()  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"  " For no inserting <CR> key.  "return pumvisible() ? "\<C-y>" : "\<CR>"endfunction" <TAB>: completion.inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"" <C-h>, <BS>: close popup and delete backword char.inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"" Close popup by <Space>."inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"" AutoComplPop like behavior."let g:neocomplete#enable_auto_select = 1" Shell like behavior(not recommended)."set completeopt+=longest"let g:neocomplete#enable_auto_select = 1"let g:neocomplete#disable_auto_complete = 1"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"" Enable omni completion.autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSSautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTagsautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJSautocmd FileType python setlocal omnifunc=pythoncomplete#Completeautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags" Enable heavy omni completion.if !exists('g:neocomplete#sources#omni#input_patterns')  let g:neocomplete#sources#omni#input_patterns = {}endif"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'" For perlomni.vim setting." https://github.com/c9s/perlomni.vimlet g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'Plugin 'astaxie/godoc'Plugin 'nsf/gocode', {'rtp': 'vim/'}Plugin 'tools/godep'Bundle 'fatih/vim-go'au FileType go nmap <leader>r <Plug>(go-run)au FileType go nmap <leader>b <Plug>(go-build)au FileType go nmap <leader>t <Plug>(go-test)au FileType go nmap <leader>c <Plug>(go-coverage)let g:go_highlight_functions = 1let g:go_highlight_methods = 1let g:go_highlight_structs = 1let g:go_highlight_operators = 1let g:go_highlight_build_constraints = 1au FileType go nmap <Leader>gd <Plug>(go-doc)au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)au FileType go nmap <Leader>s <Plug>au FileType go nmap <Leader>i <Plug>au FileType go nmap <Leader>gb <Plug>" au FileType go nmap <Leader>s <Plug>"" " Show type info for the word under your cursor" au FileType go nmap <Leader>i <Plug>"" " Open the relevant Godoc for the word under the cursor" au FileType go nmap <Leader>gd <Plug>" au FileType go nmap <Leader>gv <Plug>"" " Open the Godoc in browser" au FileType go nmap <Leader>gb <Plug>"" " Run/build/test/coverage" au FileType go nmap <leader>r <Plug>" au FileType go nmap <leader>b <Plug>" au FileType go nmap <leader>t <Plug>" au FileType go nmap <leader>c <Plug>"" " By default syntax-highlighting for Functions, Methods and Structs is" disabled." " Let" let g:go_highlight_functions = 1" let g:go_highlight_methods = 1" let g:go_highlight_structs = 1,v
Bundle 'Valloric/YouCompleteMe',V
funcName,v
" Open the Godoc in browser,V
au FileType go nmap <Leader>gv <Plug>,V
au FileType go nmap <Leader>gd <Plug>,V
" Open the relevant Godoc for the word under the cursor,V
au FileType go nmap <leader>c <Plug>,V
au FileType go nmap <leader>t <Plug>,V
au FileType go nmap <leader>b <Plug>,V
au FileType go nmap <leader>r <Plug>,V
" Run/build/test/coverage,V
" let g:go_highlight_structs = 1,V
" let g:go_highlight_methods = 1,V
" let g:go_highlight_functions = 1,V
" " Let,V
" disabled.,V
" " By default syntax-highlighting for Functions, Methods and Structs is,V
",V
filetype on,V
" " Let's enable them!,V
" au FileType go nmap <leader>c <Plug>(go-coverage),V
" au FileType go nmap <leader>t <Plug>(go-test),V
" au FileType go nmap <leader>b <Plug>(go-build),V
" au FileType go nmap <leader>r <Plug>(go-run),V
" " Run/build/test/coverage,V
tools/godep,V
off,v
" ,v
" filetype off,V
" Alan ======================",v
Bundle 'nsf/gocode',V
export PATH=$PATH:$GOPATH/bin,V
export GOPATH=$HOME/Workspace/Go/main,V
	stat := os.Stat(),V
Plugin,v
                            title = "%s %s" % (shortcut.identity, shortcut.reference_obj()['name']),V
 and,v
 and request.GET.get('type') == 'customer',v
        elif,V
if 'keyword' in request.GET and request.GET.get('keyword') != '':                status_code = status.HTTP_200_OK                queryset = Shortcut.objects.filter(identity__icontains=request.GET['keyword'])                for shortcut in queryset:                    if shortcut.reference_obj()['invoice_num'] is not None:                        title = "%s %s (%s)" % (shortcut.identity, shortcut.reference_obj()['name'], shortcut.reference_obj()['invoice_num'])                    else:                        title = "%s %s" % (shortcut.identity, shortcut.reference_obj()['name'])                    response.get('results').append({                        'title': title,                        'description': shortcut.reference_obj()['address']                    })                response.update({                    "success": True,                    "count": queryset.count()                }),v
self.object.date_of_birth.strftime('%m月%d日'),v
            print(tw_year),V
            print(year),V
,v
            date = self.object.date_of_birth - ,V
            date =  - relativedelta(years=1911),V
self.object.date_of_birth,v
from dateutil.relativedelta import relativedelta,V
(,v
int,v
self.object.date_of_birth.,v
    def format_date_of_birth(self, obj):        return obj.format().date_of_birth(),V
gender,v
    def gender(self, obj):        return obj.format().gender(),V
    format_gender = serializers.SerializerMethodField('gender'),V
    format_status = serializers.SerializerMethodField('status'),V
updated_at,v
    def updated_at(self):        if self.object.updated_at is not None:            return self.object.updated_at.strftime('%Y年%m月%d日 %I:%M:%S %p')        else:            return '',V
format_census_full_address,v
census_full_address,v
    census_full_address = serializers.SerializerMethodField('format_census_full_address'),V
    def format_census_full_address(self, obj):        return obj.format().census_full_address(),V
    def format_census_full_address(self, obj):        return obj.format().census_full_address(),V
type,v
TYPE_IN_STAFF,v
    value = ''        for item in self.object.TYPE_IN_STAFF:            value = item[1] if item[0] == self.object.type else ''            if value != '':                break        return "%s %s" % (value, self.object.job_title),v
        TYPE_IN_STAFF,V
value = ''        for item in self.object.TYPE_IN_STAFF:            value = item[1] if item[0] == self.object.type else ''            if value != '':                break        return "%s %s" % (value, self.object.job_title),v
format_,v
, 'full_address', 'census_full_address',v
        print(obj.format().full_address()),V
format_gender,v
    @ property,V
shortcut_identity,v
    shortcut_identity = serializers.SerializerMethodField('shortcut')    format_gender = serializers.SerializerMethodField('gender'),V
    def full_address(self, obj):        return obj.format().full_address(),V
    def full_address(self, obj):        return obj.format().full_address(),V
                    self.object.census_zipcode, self.census_cityarea_name(), self.object.census_address),V
                    self.object.census_zipcode, self.census_cityarea_name(), self.object.census_address),v
        # location_manager = LocationManager()        # city = location_manager.get(area_id=self.zipcode)['results'].pop().get('name')        # area = location_manager.get(area_id=self.zipcode)['results'].pop().get('areas').pop().get('name'),V
    def city_name(self):        return self.get_city_name(self.object.zipcode)    def area_name(self):        return self.get_area_name(self.object.zipcode)    def cityarea_name(self):        # location_manager = LocationManager()        # city = location_manager.get(area_id=self.zipcode)['results'].pop().get('name')        # area = location_manager.get(area_id=self.zipcode)['results'].pop().get('areas').pop().get('name')        return "%s%s" % (self.city_name(), self.area_name())    def full_address(self):        if self.object.city is not None and self.object.zipcode is not 0:            return "(%d) %s%s" % (self.object.zipcode, self.cityarea_name(), self.object.address)        return '',v
    def full_census_address(self):        if self.object.census_city is not None and self.object.census_zipcode is not 0:            return "(%d) %s%s" % (self.object.zipcode, self.cityarea_name(), self.object.address)        return '',V
    def full_address(self):        if self.object.city is not None and self.object.zipcode is not 0:            return "(%d) %s%s" % (self.object.zipcode, self.cityarea_name(), self.object.address)        return '',V
shortcut,v
    shortcut_identity = serializers.SerializerMethodField('shortcut'),V
    def gender(self):        return '先生' if self.object.gender == "male" else "小姐",V
reference_obj,v
to_json,v
identity,v
POST,v
fname,v
        post['staff'] = 0,V
